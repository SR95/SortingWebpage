{"version":3,"sources":["themes/theme.js","pages/styles/landingpagestyle.js","sorting-algos/bubblesort.js","sorting-algos/insertionsort.js","pages/Landing.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","typography","fontFamily","fontSize","h1","palette","primary","main","landinPageStyle","algoTraversalButtons","marginLeft","alignSelf","height","landingContainer","margin","spacing","unit","display","flexDirection","width","titleContainer","justifyContent","marginTop","headerContainer","marginRight","listContainer","alignItems","flexWrap","cardContainer","alignText","padding","formControl","bubbleSort","inputArr","index","autoSort","len","length","swapped","i","tmp","newArray","done","insertionSort","el","j","LandingPage","state","arrayToSort","labelName","labelValue","num","sortingAlgorithm","sortingIP","sortingIndex","fullySorted","setNumber","setState","addNumber","isNaN","replace","numericError","concat","parseInt","sortArray","bubblesort","insertionsort","handleKeyPress","event","key","classes","this","props","className","style","TextField","label","value","onChange","e","target","variant","flexGrow","onKeyPress","error","required","helperText","Button","onClick","disabled","FormControl","InputLabel","id","Select","labelId","MenuItem","FormHelperText","ToggleButton","selected","console","log","map","arrayNumber","Card","backgroundColor","Typography","Component","withStyles","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5e6a84a.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const theme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: '\"Roboto\"',\r\n    fontSize: 12,\r\n    h1: {\r\n      // could customize the h1 variant as well\r\n    }\r\n  },\r\n  palette: {\r\n    primary: { main: \"#DF1B1B\" }\r\n  }\r\n});\r\n","const landinPageStyle = theme => ({\r\n  algoTraversalButtons: { marginLeft: 10, alignSelf: \"center\", height: \"50px\" },\r\n  landingContainer: {\r\n    margin: theme.spacing.unit * 2,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: \"100vw\"\r\n  },\r\n  titleContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    marginTop: 20,\r\n    fontFamily: \"Calibri\",\r\n    fontSize: \"10vh\"\r\n  },\r\n  headerContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginLeft: 250,\r\n    marginRight: 250\r\n  },\r\n  listContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexWrap: \"wrap\",\r\n    marginRight: 20\r\n  },\r\n  cardContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignText: \"center\",\r\n    marginTop: 20,\r\n    marginLeft: 20,\r\n    padding: 5\r\n  },\r\n  formControl: {\r\n    marginTop: 25,\r\n    width: \"20vw\"\r\n  }\r\n});\r\n\r\nexport default landinPageStyle;\r\n","function bubbleSort(inputArr, index, autoSort) {\r\n  let len = inputArr.length;\r\n  let swapped = false;\r\n\r\n  // if autosort is enabled\r\n  if (autoSort) {\r\n    do {\r\n      swapped = false;\r\n      for (let i = 0; i < len; i++) {\r\n        if (inputArr[i] > inputArr[i + 1]) {\r\n          let tmp = inputArr[i];\r\n          inputArr[i] = inputArr[i + 1];\r\n          inputArr[i + 1] = tmp;\r\n          swapped = true;\r\n        }\r\n      }\r\n    } while (swapped);\r\n  } else {\r\n    if (inputArr[index] > inputArr[index + 1]) {\r\n      let tmp = inputArr[index];\r\n      inputArr[index] = inputArr[index + 1];\r\n      inputArr[index + 1] = tmp;\r\n      swapped = true;\r\n    }\r\n  }\r\n  return {\r\n    newArray: inputArr,\r\n    done: !swapped\r\n  };\r\n}\r\n\r\nexport default bubbleSort;\r\n","function insertionSort(inputArr, autoSort) {\r\n  const len = inputArr.length;\r\n  if (autoSort) {\r\n    for (let i = 0; i < len; i++) {\r\n      let el = inputArr[i];\r\n      let j;\r\n\r\n      for (j = i - 1; j >= 0 && inputArr[j] > el; j--) {\r\n        inputArr[j + 1] = inputArr[j];\r\n      }\r\n      inputArr[j + 1] = el;\r\n    }\r\n    return inputArr;\r\n  }\r\n}\r\n\r\nexport default insertionSort;\r\n","import React, { Component } from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Card,\r\n  InputLabel,\r\n  FormControl,\r\n  FormHelperText,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport { ToggleButton } from \"@material-ui/lab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport landinPageStyle from \"./styles/landingpagestyle\";\r\n\r\nimport bubblesort from \"../sorting-algos/bubblesort\";\r\nimport insertionsort from \"../sorting-algos/insertionsort\";\r\n\r\nclass LandingPage extends Component {\r\n  state = {\r\n    arrayToSort: [],\r\n    labelName: \"Type Number(s)\",\r\n    labelValue: \"\",\r\n    num: null,\r\n\r\n    sortingAlgorithm: \"Bubble Sort\",\r\n    sortingIP: false,\r\n    sortingIndex: 0,\r\n    autoSort: false,\r\n    fullySorted: true\r\n  };\r\n\r\n  setNumber = num => {\r\n    this.setState({\r\n      labelValue: num,\r\n      num: num\r\n    });\r\n  };\r\n\r\n  // ~~~~~~~~~~~ ADD A NUMBER TO ARRAY ~~~~~~~~~~~~~~\r\n  addNumber = () => {\r\n    var newArray = this.state.arrayToSort;\r\n    if (\r\n      !isNaN(this.state.num) &&\r\n      this.state.num !== null &&\r\n      this.state.num.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\") !== \"\"\r\n    ) {\r\n      this.setState({ numericError: false });\r\n      newArray = newArray.concat(parseInt(this.state.num, 10));\r\n    } else {\r\n      this.setState({ numericError: true });\r\n    }\r\n\r\n    this.setState(() => {\r\n      return {\r\n        arrayToSort: newArray,\r\n        labelName: \"Type Number(s)\",\r\n        labelValue: \"\",\r\n        num: null\r\n      };\r\n    });\r\n  };\r\n\r\n  // ~~~~~~~~~~~~~~~ SORTING ~~~~~~~~~~~~~~~~\r\n  sortArray = autoSort => {\r\n    if (this.state.sortingAlgorithm == \"Bubble Sort\") {\r\n      this.setState({ sortingIP: true });\r\n      let { newArray, done } = bubblesort(\r\n        this.state.arrayToSort,\r\n        this.state.sortingIndex,\r\n        this.state.autoSort || autoSort\r\n      );\r\n\r\n      // no autosort\r\n      this.setState({\r\n        sortingIndex: this.state.sortingIndex + 1,\r\n        fullySorted: done && this.state.fullySorted\r\n      });\r\n\r\n      // endpoint regardless of autoSort or not\r\n      if ((this.state.autoSort || autoSort) && done)\r\n        this.setState({ sortingIP: false, sortingIndex: 0 });\r\n      else if (\r\n        !(this.state.autoSort || autoSort) &&\r\n        done &&\r\n        this.state.fullySorted &&\r\n        this.state.sortingIndex == this.state.arrayToSort.length - 1\r\n      )\r\n        this.setState({ sortingIP: false, sortingIndex: 0 });\r\n      // update the array\r\n      this.setState({ arrayToSort: newArray });\r\n\r\n      // update sorting index\r\n      if (this.state.sortingIndex == this.state.arrayToSort.length - 1)\r\n        this.setState({ sortingIndex: 0, fullySorted: true });\r\n    } else if (this.state.sortingAlgorithm == \"Insertion Sort\") {\r\n      let newArray = insertionsort(this.state.arrayToSort, true);\r\n      this.setState({\r\n        arrayToSort: newArray\r\n      });\r\n    }\r\n  };\r\n\r\n  handleKeyPress = event => {\r\n    if (event.key === \"Enter\") {\r\n      this.addNumber();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classes.landingContainer}>\r\n        <div className={classes.titleContainer}>Sort-your-number.exe</div>\r\n        <div className={classes.headerContainer} style={{ marginTop: 50 }}>\r\n          <TextField\r\n            label={this.state.labelName}\r\n            value={this.state.labelValue}\r\n            onChange={e => this.setNumber(e.target.value)}\r\n            variant=\"outlined\"\r\n            style={{ flexGrow: 4, marginRight: 20 }}\r\n            onKeyPress={this.handleKeyPress}\r\n            error={this.state.numericError}\r\n            required\r\n            helperText={\r\n              (this.state.numericError && \"Value must be a number.\") || \"\"\r\n            }\r\n          />\r\n          <Button style={{ flexGrow: 1 }} onClick={this.addNumber}>\r\n            Submit\r\n          </Button>\r\n          <Button\r\n            style={{ flexGrow: 1 }}\r\n            disabled={this.state.sortingIP}\r\n            onClick={() => this.sortArray(false)}\r\n          >\r\n            Begin Sort\r\n          </Button>\r\n          <Button\r\n            style={{ flexGrow: 1 }}\r\n            disabled={this.state.arrayToSort.length === 0}\r\n            onClick={() =>\r\n              this.setState({\r\n                arrayToSort: [],\r\n                labelName: \"Type Number(s)\",\r\n                labelValue: \"\",\r\n                num: null,\r\n                sortingAlgorithm: \"Bubble Sort\",\r\n                sortingIP: false,\r\n                sortingIndex: 0,\r\n                autoSort: false,\r\n                fullySorted: true\r\n              })\r\n            }\r\n          >\r\n            Reset\r\n          </Button>\r\n        </div>\r\n        <div className={classes.headerContainer}>\r\n          <FormControl\r\n            className={classes.formControl}\r\n            disabled={this.state.sortingIP}\r\n          >\r\n            <InputLabel id=\"select-sorting-algorithm\">\r\n              Choose a sorting Algorithm\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"select-sorting-algorithm-label\"\r\n              id=\"select-sorting-algorithm-id\"\r\n              value={this.state.sortingAlgorithm}\r\n              onChange={event => {\r\n                this.setState({ sortingAlgorithm: event.target.value });\r\n              }}\r\n            >\r\n              <MenuItem value=\"Bubble Sort\">Bubble Sort</MenuItem>\r\n              <MenuItem value=\"Insertion Sort\">Insertion Sort</MenuItem>\r\n              <MenuItem disabled value=\"Merge Sort\">\r\n                Merge Sort\r\n              </MenuItem>\r\n            </Select>\r\n            <FormHelperText>Default is Bubble Sort.</FormHelperText>\r\n          </FormControl>\r\n          <Button\r\n            className={classes.algoTraversalButtons}\r\n            style={{ marginLeft: 30 }}\r\n            disabled={this.state.autoSort || !this.state.sortingIP}\r\n            onClick={() => this.sortArray(false)}\r\n          >\r\n            Next step\r\n          </Button>\r\n          <ToggleButton\r\n            className={classes.algoTraversalButtons}\r\n            value=\"auto sort\"\r\n            selected={this.state.autoSort}\r\n            onChange={() => {\r\n              console.log(this.state.autoSort);\r\n              this.setState({\r\n                autoSort: !this.state.autoSort,\r\n                sortingIndex: 0\r\n              });\r\n\r\n              if (this.state.sortingIP) this.sortArray(true);\r\n            }}\r\n          >\r\n            Auto sort\r\n          </ToggleButton>\r\n        </div>\r\n        <div className={classes.listContainer}>\r\n          {this.state.arrayToSort.map((arrayNumber, index) => (\r\n            <Card\r\n              className={classes.cardContainer}\r\n              style={{\r\n                backgroundColor:\r\n                  (index == this.state.sortingIndex ||\r\n                    index == this.state.sortingIndex - 1) &&\r\n                  this.state.sortingIP\r\n                    ? \"red\"\r\n                    : \"#D3D3D3\"\r\n              }}\r\n            >\r\n              <Typography variant=\"h1\">{arrayNumber}</Typography>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(landinPageStyle)(LandingPage);\r\n","import React from \"react\";\r\nimport { MuiThemeProvider } from \"@material-ui/core\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\n\r\nimport { theme } from \"./themes/theme\";\r\nimport LandingPage from \"./pages/Landing\";\r\n\r\nimport \"./App.css\";\r\n\r\n/*\r\n\r\nclass App extends Component {  \r\n  constructor(props) {    \r\n    super(props);    \r\n    this.state = {}    \r\n    this.connecToServer = this.connecToServer.bind(this);  \r\n  }\r\n  connecToServer() {    \r\n    fetch('/');  \r\n  }\r\n  componentDidMount() {    \r\n    this.connecToServer();  \r\n  }\r\n  render() {    \r\n    return (      \r\n      <Router>      \r\n        <div className=\"container\">         \r\n          <Navbar />         \r\n          <Route exact path=\"/\" component={Home} />         \r\n          <Route exact path=\"/social\" component={Social} />         \r\n          <Footer />      \r\n        </div>      \r\n      </Router>    \r\n      );  \r\n    }}\r\n\r\n\r\n\r\n*/\r\n\r\nfunction App() {\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <BrowserRouter>\r\n        <Route path=\"/\" component={LandingPage} />\r\n      </BrowserRouter>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}